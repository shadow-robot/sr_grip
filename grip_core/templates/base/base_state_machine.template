#!/usr/bin/env python

# Copyright 2020 Shadow Robot Company Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

{% for state_to_import in state_machine.states_source %}
from {{ state_to_import[0] }}.{{ state_to_import[1] }} import {{ state_to_import[2] }}
{% endfor %}
import rospy
import smach
from collections import OrderedDict
{% if commanders %}
from sr_robot_commander.sr_robot_commander import SrRobotCommander
from moveit_commander.exception import MoveItCommanderException
from moveit_msgs.msg import PlanningSceneComponents, PlanningScene
from moveit_msgs.srv import GetPlanningScene
from grip_core.srv import SetInitACM
{% endif %}

class {{ state_machine.type }}(smach.StateMachine):

    """
        Generic state machine allowing to create a behavior depending on the states' outcome
    """

    def __init__(self, outcomes={% if "outcomes" in state_machine.parameters%}{{ state_machine.parameters.outcomes }}{% else %}["Task success", "Task failure"]{% endif %}):
        """
            Initialise the state machine and all information required to run it
        """
        smach.StateMachine.__init__(self, outcomes=outcomes)
        with self:
        {% for state_name, state in state_machine.components.items() %}
            smach.StateMachine.add("{{ state_name }}", {{ state.type }}({% for param_name, param_value in state.parameters.items() %}{% if param_name != "name" %}{{ param_name }}={% if param_value is string and "self" not in param_value %}"{{ param_value }}"{% else %}{{ param_value }}{% endif %}{% if not loop.last %}, {% endif %}{% endif %}{% endfor %}), transitions={{ state.transitions}})
        {% endfor %}
        # Initialise the commanders
        self.initialise_commanders()

    def initialise_commanders(self):
        """
            Initialise the different commanders according to GRIP's configuration
        """
        {% if commanders %}
        configured_groups = {{ commanders }}
        commanders = dict()
        for group_name, group_params in configured_groups.items():
            # Create the SrRobotCommander corresponding to the aforementioned group
            commander = SrRobotCommander(name=group_name)
            # If it fails, raises an exception
            if commander is None:
                raise MoveItCommanderException("Failed to initialise the commander for {}".format(group_name))
            # Otherwise set the options of the commander
            else:
                commander.set_max_velocity_scaling_factor(group_params["robot_speed_factor"])
                commander.set_planner_id(group_params["planner_name"])
                commander.set_num_planning_attempts(group_params["number_plan_attempt"])
                commander.set_planning_time(group_params["planning_max_time"])

                # Store the arm controller in userdata
                commanders[group_name] = commander
        self.userdata.commanders = commanders
        {% else %}
        pass
        {% endif %}

{% if "node_name" in state_machine.parameters %}
if __name__ == "__main__":
    rospy.init_node("{{state_machine.parameters.node_name}}")
    state_machine = {{ state_machine.type }}()
    # Execute the state machine
    state_machine.execute()
{% endif %}
